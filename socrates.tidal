# intro

Tidal https://tidalcycles.org/  make patterns with code

language for describing
(e.g., polyphonic, polyrhythmic, generative) sequences.

extensive library ... for transforming and combining them.

quickly create complex patterns from simple ingredients.

does not make sound itself, uses
https://supercollider.github.io/
https://github.com/musikinformatik/SuperDirt

is embedded in the Haskell language https://www.haskell.org/

## Why Haskell and what does TidalCycles benefit from?

1. No side effects
2. Static type system
3. Polymorphy
4. Higher order functions
5. Functors, Applicative, Monads

## Pattern and Time

abcabcabc...

repeat  abc

Pattern  === time -> [event]

-- Time as Arc and Rational
type Time = Rational

# sources of sound

## synthesizers

s "notes" >| up "0"

s "notes" >| up "d"

## samples

s "numbers" >| n "0"

s "numbers" >| n "0" # speed "-1"

s "numbers" >| n "0" # speed rand

-- Why does 'speed rand' work?
-- Answer: higher order functions!

# patterns

## concatenation (naive)

s "notes" >| up "<c d e>"


## speed up, speed down:

fast 3 $ s "notes" >| up "<c d e>"

## combine two patterns

fast 3 $ s "<print numbers>" >| n "<0 2 4>"

-- values from left (<), right (>), combined (+), (*)

s "notes" >| up ( "<c d>" + "<4 4>" )

## insertion: some haskell magic

-- This works because a Pattern is a functor instance
n $ 3 + "1 2 3 4"

-- and + is an inline function

:t (+)

:t (+3)

(+) 3 3

:t (3 + 3)

3 + 3

-- in haskell you see the fmap function
n $ fmap (+3) ("1 2 3 4")

n $ (+3) <$> ("1 2 3 4")

n $ 3 + "1 2 3 4"

-- This works because a Pattern is an applicative instance
n "1 2 3" + n "4 5 6"

n "1 [2 3] 4" + n "4 5 6"

## functions that produce and modify patterns: run, slow, rev

s "808" >| n (run 8)

s "808" >| n (slow 8 $ run 8)

s "arpy" >| up (scale "major" $ run 6)

s "arpy" >| up (scale "major" $ run 6) + up "g"

-- where do we put the rev?

s "arpy" # up ("[1 2 3]") |+| up ("[1 2 3]")


## parallel composition: stack, ","

s "arpy" >| up (stack ["<c3 g3 a3>", "<e f>" ])

s "arpy" >| up "<c3 g3 a3, e f>"

## cat and speed-up: fastcat "[ .. ]"

s "arpy" >| up "<c3 g3 a3>"

fast 3 $ s "notes" >| up "<c3 g3 a3>"

s "arpy" >| up "[c3 g3 a3]"

s "arpy" >| up "[c3 g3 a3, e f]"

## time-shift  ~>

s "arpy" >| n ( "<0 0.75>" ~> "[1 3 5 8]" )

s "arpy" >| n ("0.75" <~ "[1 3 5 8]" )

s "arpy" >| n ( "<0 0.75 0.5>" ~> "[1 3 5 8]" )

## random number generator

s "arpy" >| n "[c? a f?0.8 e]"

## playing modified pattern version parallel

d1 $ off "0.25" (fast 2) $ s "arpy" >| n "[c a f e]"

# The five layer of pattern

1. Sequencing: "<>", "[]"
2. Symmetry: rev, ~>
3. Imperfektion: "?0.5"
4. Composition: "|<", "|>", "|+", "|*"
5. Interference: off, superimpose


# references:

* https://tidalcycles.org/index.php/All_effects_and_synths
* https://github.com/musikinformatik/SuperDirt
* https://github.com/tidalcycles/Dirt-Samples

* https://tidalcycles.org/index.php/Tutorial
* https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/tc/types/
* https://tidalcycles.org/index.php/Mini_notation_syntax

* https://hackage.haskell.org/package/tidal-1.6.1/docs/Sound-Tidal-Core.html#v:cat
